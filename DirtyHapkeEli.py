# -*- coding: utf-8 -*-
"""
Created on Tue Oct  2 10:04:58 2018

@author: ecskl
"""

#Import Files here
import numpy as np
from matplotlib import pyplot as plt
from matplotlib.figure import Figure
from matplotlib.ticker import MaxNLocator

#Decalarations go here

no_grain_samples = 3
total_guesses = no_grain_samples * 4 # (4 is for B,C,S,D values)
guess_key = 'sml'
num_solns = 1

#Small Grain
lowb_sml, upb_sml = -1.7, 1.7
lowc_sml, upc_sml = -1.0, 1.0
lows_sml, ups_sml = 0, 0.06
lowD_sml, upD_sml = 21, 106

#Medium Grain
lowb_med, upb_med = -1.7, 1.7
lowc_med, upc_med = -1.0, 1.0
lows_med, ups_med = 0, 0.06
lowD_med, upD_med = 35, 150

#Large Grain
lowb_big, upb_big = -1.7, 1.7
lowc_big, upc_big = -1.0, 1.0
lows_big, ups_big = 0, 0.06
lowD_big, upD_big = 50, 180

lowk, upk = 1e-8, 0.1

#########################################################################################

ks = {'sml': np.array([1.57813825e-05, 1.55072622e-05, 1.51729805e-05, 1.47812784e-05,
       1.43374086e-05, 1.42503010e-05, 1.28658756e-05, 1.22569961e-05,
       1.25659066e-05, 1.20329208e-05, 1.05370115e-05, 1.01674243e-05,
       1.03023829e-05, 9.93657613e-06, 9.69658917e-06, 9.55709331e-06,
       9.07391733e-06, 8.73222582e-06, 8.59204925e-06, 8.43059244e-06,
       8.23701159e-06, 8.04907802e-06, 7.92930401e-06, 7.72484039e-06,
       7.50672704e-06, 7.29284267e-06, 7.03388007e-06, 6.69074529e-06,
       6.38204558e-06, 6.11305710e-06, 5.92372211e-06, 5.81536115e-06,
       5.76544700e-06, 5.69969165e-06, 5.68098537e-06, 5.63658743e-06,
       5.57777816e-06, 5.55151415e-06, 5.50308790e-06, 5.49992578e-06,
       5.45069327e-06, 5.39083752e-06, 5.36628737e-06, 5.35133958e-06,
       5.35892584e-06, 5.35246100e-06, 5.34514160e-06, 5.35308443e-06,
       5.41363907e-06, 5.41255977e-06, 5.45173411e-06, 5.60456452e-06,
       5.66702401e-06, 5.83654793e-06, 5.91515048e-06, 6.02375038e-06,
       6.16622604e-06, 6.32324972e-06, 6.50123377e-06, 6.65254972e-06,
       6.87180893e-06, 6.95827864e-06, 7.22973496e-06, 7.33016369e-06,
       7.47580234e-06, 7.46901052e-06, 7.69719998e-06, 7.79838316e-06,
       8.10313324e-06, 8.32804525e-06, 8.59539441e-06, 8.88263082e-06,
       9.30669981e-06, 9.56106026e-06, 9.92905085e-06, 1.03236321e-05,
       1.08663697e-05, 1.14384173e-05, 1.19716499e-05, 1.23451836e-05,
       1.28546977e-05, 1.34389611e-05, 1.37966261e-05, 1.45138543e-05,
       1.50741963e-05, 1.55879856e-05, 1.60540494e-05, 1.66849688e-05,
       1.71463338e-05, 1.75695647e-05, 1.80645595e-05, 1.83547617e-05,
       1.89522211e-05, 1.93743251e-05, 1.97100722e-05, 1.97100362e-05,
       2.01335137e-05, 2.03445209e-05, 2.04795654e-05, 2.05955417e-05,
       2.05226349e-05, 2.06818559e-05, 2.06964502e-05, 2.06939789e-05,
       2.06462310e-05, 2.03838459e-05, 1.99586883e-05, 2.01688960e-05,
       2.01470197e-05, 2.02460768e-05, 2.04038881e-05, 2.07074271e-05,
       2.08638781e-05, 2.09031969e-05, 2.08257019e-05, 2.05326715e-05,
       2.01454878e-05, 1.98213105e-05, 1.95381844e-05, 1.91470688e-05,
       1.86651185e-05, 1.83318243e-05, 1.79639662e-05, 1.76268493e-05,
       1.73553909e-05, 1.71296409e-05, 1.70068657e-05, 1.69073819e-05,
       1.66867315e-05, 1.65344309e-05, 1.63100011e-05, 1.62546913e-05,
       1.61925303e-05, 1.61248300e-05, 1.59535921e-05, 1.57346244e-05,
       1.56949721e-05, 1.54214214e-05, 1.52592759e-05, 1.51455005e-05,
       1.50901174e-05, 1.52094652e-05, 1.51647164e-05, 1.52862034e-05,
       1.53996975e-05, 1.55471857e-05, 1.55924438e-05, 1.55665906e-05,
       1.53658552e-05, 1.53327611e-05, 1.53626349e-05, 1.53605210e-05,
       1.52842224e-05, 1.52662129e-05, 1.53803986e-05, 1.55831295e-05,
       1.58793342e-05, 1.67058923e-05, 1.80536304e-05, 2.09613065e-05,
       2.59097235e-05, 3.13015019e-05, 3.65387594e-05, 4.19499548e-05,
       4.56852636e-05, 4.46973548e-05, 4.27452648e-05, 4.13607990e-05,
       3.94408835e-05, 3.69679483e-05, 3.40116424e-05, 3.16376192e-05,
       2.99137576e-05, 2.84446060e-05, 2.76389178e-05, 2.71052707e-05,
       2.65786847e-05, 2.57097772e-05, 2.48524754e-05, 2.43272083e-05,
       2.36595093e-05, 2.33312398e-05, 2.28303501e-05, 2.25131636e-05,
       2.22409113e-05, 2.21639923e-05, 2.21902173e-05, 2.19824302e-05,
       2.17223511e-05, 2.15354595e-05, 2.12448670e-05, 2.08341823e-05,
       2.04942182e-05, 2.02671559e-05, 2.02239684e-05, 2.02198448e-05,
       2.02584100e-05, 1.99623712e-05, 2.04125947e-05, 2.06517681e-05,
       2.13420220e-05, 2.19568249e-05, 2.24820523e-05, 2.30848466e-05,
       2.37665646e-05, 2.48313418e-05, 2.60023619e-05, 2.78625295e-05,
       3.02155263e-05, 3.29663941e-05, 3.58669394e-05, 3.91165094e-05,
       4.16128010e-05, 4.34318369e-05, 4.47928387e-05]), 
      'med': np.array([2.16542394e-05, 2.16037748e-05, 2.14110090e-05, 2.10836597e-05,
       2.06275898e-05, 2.07849109e-05, 1.85872573e-05, 1.76714292e-05,
       1.85519513e-05, 1.77012770e-05, 1.52284313e-05, 1.45992013e-05,
       1.49685638e-05, 1.44487867e-05, 1.41171983e-05, 1.39188484e-05,
       1.32053880e-05, 1.27102082e-05, 1.25366629e-05, 1.23482037e-05,
       1.20059214e-05, 1.17645787e-05, 1.15442135e-05, 1.12952812e-05,
       1.10886991e-05, 1.07067305e-05, 1.03642937e-05, 9.90447512e-06,
       9.48857969e-06, 9.09903148e-06, 8.83193356e-06, 8.67196260e-06,
       8.57882096e-06, 8.51632833e-06, 8.46958775e-06, 8.45924203e-06,
       8.38027652e-06, 8.31493725e-06, 8.23456502e-06, 8.22720295e-06,
       8.14092738e-06, 8.06655539e-06, 8.01259444e-06, 7.99878170e-06,
       7.97919275e-06, 7.95332085e-06, 8.02710517e-06, 8.01949677e-06,
       8.10827408e-06, 8.19905249e-06, 8.23434719e-06, 8.42811239e-06,
       8.61545085e-06, 8.82369461e-06, 8.98925394e-06, 9.18399535e-06,
       9.39254836e-06, 9.62792220e-06, 9.79825500e-06, 9.98525654e-06,
       1.02460202e-05, 1.05305664e-05, 1.08341039e-05, 1.10372816e-05,
       1.13325192e-05, 1.13768301e-05, 1.17381862e-05, 1.19633299e-05,
       1.24469481e-05, 1.28237597e-05, 1.32695696e-05, 1.37478066e-05,
       1.43768607e-05, 1.49309416e-05, 1.56441617e-05, 1.62603941e-05,
       1.69947158e-05, 1.77802188e-05, 1.86090887e-05, 1.94741162e-05,
       2.05171045e-05, 2.14086774e-05, 2.22627045e-05, 2.31582867e-05,
       2.41200907e-05, 2.50563442e-05, 2.60630569e-05, 2.67777995e-05,
       2.78221629e-05, 2.85506094e-05, 2.91202416e-05, 2.98571255e-05,
       3.05513902e-05, 3.12077819e-05, 3.15579121e-05, 3.21106786e-05,
       3.27824656e-05, 3.30426439e-05, 3.32620988e-05, 3.34891257e-05,
       3.36660119e-05, 3.35873904e-05, 3.35436295e-05, 3.36584932e-05,
       3.36951337e-05, 3.34411189e-05, 3.30297788e-05, 3.31686614e-05,
       3.31174895e-05, 3.31807340e-05, 3.33666164e-05, 3.36868506e-05,
       3.38453413e-05, 3.37166890e-05, 3.38251054e-05, 3.33371603e-05,
       3.29306394e-05, 3.23042100e-05, 3.18184305e-05, 3.09085831e-05,
       3.01078224e-05, 2.95033723e-05, 2.89171193e-05, 2.83579994e-05,
       2.81321065e-05, 2.75494811e-05, 2.73700603e-05, 2.70884354e-05,
       2.68413379e-05, 2.66765408e-05, 2.63197161e-05, 2.61795942e-05,
       2.60249871e-05, 2.59749436e-05, 2.57544233e-05, 2.53817190e-05,
       2.53744682e-05, 2.50245337e-05, 2.46532295e-05, 2.46727995e-05,
       2.44530500e-05, 2.45902924e-05, 2.45299896e-05, 2.47076557e-05,
       2.49579108e-05, 2.49865400e-05, 2.51819578e-05, 2.51509731e-05,
       2.48078368e-05, 2.47609894e-05, 2.47832342e-05, 2.48025402e-05,
       2.49220661e-05, 2.49375537e-05, 2.51463829e-05, 2.54485261e-05,
       2.59944622e-05, 2.72357237e-05, 2.94282445e-05, 3.42359929e-05,
       4.19292723e-05, 5.06189246e-05, 5.91129125e-05, 6.75964059e-05,
       7.31435305e-05, 7.17678618e-05, 6.81941958e-05, 6.61516726e-05,
       6.32139269e-05, 5.92409069e-05, 5.46814170e-05, 5.07876300e-05,
       4.77449274e-05, 4.59409399e-05, 4.45687311e-05, 4.33254474e-05,
       4.25655283e-05, 4.10665581e-05, 3.98439394e-05, 3.88722032e-05,
       3.80449077e-05, 3.72760898e-05, 3.64425077e-05, 3.58538654e-05,
       3.56969733e-05, 3.52985316e-05, 3.54151896e-05, 3.50756569e-05,
       3.47845805e-05, 3.43644211e-05, 3.38650025e-05, 3.33645555e-05,
       3.26824446e-05, 3.25047817e-05, 3.25532948e-05, 3.23491358e-05,
       3.21354415e-05, 3.18337543e-05, 3.20354855e-05, 3.28977198e-05,
       3.33875357e-05, 3.44433681e-05, 3.52260742e-05, 3.66744541e-05,
       3.75117972e-05, 3.92516487e-05, 4.15769056e-05, 4.43412236e-05,
       4.82279220e-05, 5.23932854e-05, 5.70085189e-05, 6.20972410e-05,
       6.64706925e-05, 6.93963820e-05, 7.14786772e-05]), 
      'big': np.array([2.60013489e-05, 2.60857050e-05, 2.59588522e-05, 2.56295797e-05,
       2.51048955e-05, 2.52999549e-05, 2.25990976e-05, 2.13878783e-05,
       2.23491794e-05, 2.13266064e-05, 1.81456105e-05, 1.74457230e-05,
       1.78398357e-05, 1.72335842e-05, 1.67701602e-05, 1.65018791e-05,
       1.56424302e-05, 1.50163495e-05, 1.48160528e-05, 1.45365385e-05,
       1.42114380e-05, 1.38503697e-05, 1.35846936e-05, 1.32739386e-05,
       1.29401640e-05, 1.25623988e-05, 1.20856279e-05, 1.15466632e-05,
       1.10262741e-05, 1.06169930e-05, 1.03165622e-05, 1.00961254e-05,
       1.00359133e-05, 9.94493312e-06, 9.90449065e-06, 9.85128755e-06,
       9.77635306e-06, 9.71236006e-06, 9.66841589e-06, 9.61319776e-06,
       9.55578651e-06, 9.47101317e-06, 9.45022941e-06, 9.37947240e-06,
       9.37885365e-06, 9.34596120e-06, 9.36136660e-06, 9.40989971e-06,
       9.47135797e-06, 9.53982653e-06, 9.61755743e-06, 9.82960095e-06,
       1.00351995e-05, 1.02746387e-05, 1.05222638e-05, 1.07501928e-05,
       1.10228590e-05, 1.13098982e-05, 1.14682813e-05, 1.17150249e-05,
       1.19143896e-05, 1.24636587e-05, 1.27573355e-05, 1.30169394e-05,
       1.32818605e-05, 1.34744023e-05, 1.38319355e-05, 1.41921931e-05,
       1.46739461e-05, 1.51523834e-05, 1.56966782e-05, 1.63854487e-05,
       1.70671806e-05, 1.77373409e-05, 1.85419101e-05, 1.93813332e-05,
       2.03563136e-05, 2.14252171e-05, 2.24671382e-05, 2.34668322e-05,
       2.45205583e-05, 2.57371421e-05, 2.67795153e-05, 2.80378926e-05,
       2.90165461e-05, 3.02682244e-05, 3.13775775e-05, 3.24580342e-05,
       3.37088893e-05, 3.46475075e-05, 3.55173704e-05, 3.63797508e-05,
       3.72172843e-05, 3.82624972e-05, 3.86179242e-05, 3.91881912e-05,
       3.99381161e-05, 4.05487889e-05, 4.07383094e-05, 4.09521599e-05,
       4.09514902e-05, 4.09138686e-05, 4.08286220e-05, 4.11329225e-05,
       4.09241075e-05, 4.08285669e-05, 4.01769137e-05, 4.03214740e-05,
       4.02539029e-05, 4.03787072e-05, 4.07569013e-05, 4.11633368e-05,
       4.18263841e-05, 4.13740113e-05, 4.16058871e-05, 4.09968544e-05,
       4.06344356e-05, 3.98068852e-05, 3.91097138e-05, 3.79820203e-05,
       3.71271189e-05, 3.62830968e-05, 3.52811211e-05, 3.46519923e-05,
       3.44902666e-05, 3.37352608e-05, 3.33859788e-05, 3.30470983e-05,
       3.25997898e-05, 3.26375736e-05, 3.21254569e-05, 3.19066664e-05,
       3.16506170e-05, 3.16217803e-05, 3.11777406e-05, 3.10515757e-05,
       3.06857398e-05, 3.02703962e-05, 2.99935270e-05, 2.98818678e-05,
       2.98402482e-05, 2.97304178e-05, 2.97694445e-05, 3.00322988e-05,
       3.02058959e-05, 3.04606460e-05, 3.05783525e-05, 3.03675375e-05,
       3.02173976e-05, 3.01977834e-05, 3.00254916e-05, 3.02022551e-05,
       3.03771266e-05, 3.03507808e-05, 3.07757109e-05, 3.12324262e-05,
       3.17640642e-05, 3.36088856e-05, 3.62061583e-05, 4.23916611e-05,
       5.30252503e-05, 6.47796748e-05, 7.52804066e-05, 8.67184294e-05,
       9.36936244e-05, 9.21502405e-05, 8.80663843e-05, 8.50285465e-05,
       8.09169913e-05, 7.57434634e-05, 6.92665932e-05, 6.43917140e-05,
       6.08904369e-05, 5.76667456e-05, 5.60908788e-05, 5.47201567e-05,
       5.34918667e-05, 5.14402152e-05, 4.95099244e-05, 4.84660852e-05,
       4.72092443e-05, 4.62871637e-05, 4.52073722e-05, 4.45164623e-05,
       4.38852920e-05, 4.34156382e-05, 4.33524437e-05, 4.31824972e-05,
       4.24646012e-05, 4.22278864e-05, 4.18537253e-05, 4.10185728e-05,
       4.04319582e-05, 3.97841828e-05, 3.96119692e-05, 3.93025851e-05,
       3.92928329e-05, 3.90760230e-05, 3.92883665e-05, 4.00788715e-05,
       4.07858429e-05, 4.19737630e-05, 4.32969253e-05, 4.47368197e-05,
       4.59466390e-05, 4.82994309e-05, 5.14525174e-05, 5.57082864e-05,
       6.04499753e-05, 6.62036959e-05, 7.26058503e-05, 7.93445106e-05,
       8.50431562e-05, 8.88395551e-05, 9.11360045e-05])}

self_guesses = {'sml': (0.1, 0.3, 0.0, 63.0, 0.0000000000000000001), 
                'med': (0.1, 0.3, 0.0, 106.0, 0.0000000000000000001),
                'big': (0.1, 0.3, 0.0, 150.0, 0.0000000000000000001)}

# this is my fix for getting in new data that is not
import csv


with open("SmallGrain.csv", 'rb') as csvfile:
    sml_data = list(csv.reader(csvfile))

with open("MediumGrain.csv", 'rb') as csvfile:
    med_data = list(csv.reader(csvfile))

with open("LargeGrain.csv", 'rb') as csvfile:
    big_data = list(csv.reader(csvfile))

sml_data = np.asarray(sml_data, dtype=np.float64)
med_data = np.asarray(med_data, dtype=np.float64)
big_data = np.asarray(big_data, dtype=np.float64)




self_spectra = {'sml': sml_data, 'med': med_data, 
 'big': big_data}




#these are already pre-processed so just renaming
self_pp_spectra = self_spectra.copy()

k = ks[guess_key]
guesses = np.empty(len(k) + total_guesses)
ff = np.zeros(no_grain_samples)

for i, key in enumerate(sorted(self_guesses.keys(), reverse=True)):
      g = self_guesses[key]
      # Unpacks the b,c,s,D values for each grain size into one large array. g holds b,c,s,D,f -- we take only the first four
      guesses[i:total_guesses:no_grain_samples] = g[:4] 
      # guesses Example:
      # for sml, med anf big grain sizes
      # [sml-b, med-b, big-b, sml-C, med-C, big-C, sml-S, med-S, big-S, sml-D, med-D, big-D, 215 values of K]
      # total with the length of K - 4 values for each grain size -- this is the magic 12
      ff[i] = g[4]
guesses[total_guesses:] = k 

# set up bounds
lb = np.empty_like(guesses)
#Values that will be there regardless if additional grain sizes are uploaded
lb[:12] = [lowb_sml, lowb_med, lowb_big, lowc_sml, lowc_med, lowc_big, lows_sml, lows_med, lows_big,
lowD_sml, lowD_med, lowD_big]

#Filling in rest of the values
lb[total_guesses:] = lowk

ub = np.empty_like(guesses)
ub[:12] = [upb_sml, upb_med, upb_big, upc_sml, upc_med, upc_big, ups_sml, ups_med, ups_big,
upD_sml, upD_med, upD_big]
ub[12:] = upk
self_bounds = (lb, ub)

# some other stuff we will need
phase_fn = 'legendre'
scatter_type = 'isotropic'
thetai = -30.0
thetae = 0
n1 = 1.5725
Bg = 0.0

scatter = scatter_type
thetai, thetae = np.deg2rad([float(thetai), float(thetae)])
no_of_grain_samples = len(self_spectra)

thetai = np.asarray(thetai)
thetae = np.asarray(thetae)
cosg = np.cos(np.abs(thetae - thetai))
u0 = np.cos(thetai)
u = np.cos(thetae)
Bg1 = Bg + 1
n = n1
n = np.asarray(n)


#some more stuff from initialize that may be needed
HapkeModel = get_hapke_model(phase_fn=phase_fn, scatter=scatter_type)
self_hapke_scalar = HapkeModel(thetai, thetae, float(n1), float(Bg))

self_hapke_vector_isow = self_hapke_scalar.copy()

#I think I need to do this but I can't find where this conversion is made
spectra=self_pp_spectra.copy()
wave = spectra['med'][:,0]
actuals = [spectra[key][:,1] for key in spectra.keys()]

coefg = guesses.copy()
k = coefg[total_guesses:]#actually coef in code where function defined
loss=0
#this needs to be modified for each grain
b, c, s, D = coefg[0:total_guesses:no_of_grain_samples]
    #now do all stuff to one grain size and check results

Alpha1 = (4 * np.pi * k) / wave
Alpha1_s = Alpha1 + s
tmp = np.sqrt(Alpha1/Alpha1_s)
ri1 = (1-tmp) /(1 + tmp)
tmp = np.exp(-D * np.sqrt(Alpha1*Alpha1_s))
THETA1 = (ri1 + tmp) / (1 + ri1*tmp)
numer = (n - 1) ** 2
denom = (n + 1) ** 2
self_Se = numer / denom + 0.05
self_Si = 1.014 - 4 / (n * denom)
scat_eff1 = self_Se + (1-self_Se)*(((1-self_Si)*THETA1)/(1 - self_Si*THETA1))
gamma1 = np.sqrt(1 - scat_eff1)
_r01 = (1 - gamma1) / (1+gamma1)
_Hu01 = 1/(1 - u0*scat_eff1*(_r01+np.log((1+u0)/u0)*(0.5 - _r01*u0)))
_Hu1 = 1/(1 - u*scat_eff1*(_r01+np.log((1+u)/u)*(0.5 - _r01*u))) 

def single_particle_phase(b, c):
    # two-term legendre polynomial phase function P(g)
    return 1 + b * cosg + c * (1.5*(cosg**2)-0.5)

Pg = single_particle_phase(b, c)

def radiance_coeff(scat_eff, b, c, Bg1, Hu0 , Hu, u , u0, ff=None):
  Pg = single_particle_phase(b, c)
  tmp = Pg * Bg1 + Hu*Hu0 - 1
  return tmp * (scat_eff/4.) / (u + u0)

rc1 = radiance_coeff(scat_eff1, b, c, Bg1, _Hu01 , _Hu1, u , u0, ff[0])

b, c, s, D = coefg[1:total_guesses:no_of_grain_samples]
    #now do all stuff to one grain size and check results

Alpha1 = (4 * np.pi * k) / wave
Alpha1_s = Alpha1 + s
tmp = np.sqrt(Alpha1/Alpha1_s)
ri1 = (1-tmp) /(1 + tmp)
tmp = np.exp(-D * np.sqrt(Alpha1*Alpha1_s))
THETA1 = (ri1 + tmp) / (1 + ri1*tmp)
numer = (n - 1) ** 2
denom = (n + 1) ** 2
self_Se = numer / denom + 0.05
self_Si = 1.014 - 4 / (n * denom)
scat_eff1 = self_Se + (1-self_Se)*(((1-self_Si)*THETA1)/(1 - self_Si*THETA1))
gamma1 = np.sqrt(1 - scat_eff1)
_r01 = (1 - gamma1) / (1+gamma1)
_Hu01 = 1/(1 - u0*scat_eff1*(_r01+np.log((1+u0)/u0)*(0.5 - _r01*u0)))
_Hu1 = 1/(1 - u*scat_eff1*(_r01+np.log((1+u)/u)*(0.5 - _r01*u))) 


Pg = single_particle_phase(b, c)


rc1 = radiance_coeff(scat_eff2, b, c, Bg1, _Hu02 , _Hu2, u , u0, ff[1])
    
    